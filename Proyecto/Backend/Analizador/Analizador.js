/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,48],$V2=[1,44],$V3=[1,49],$V4=[1,50],$V5=[1,51],$V6=[1,52],$V7=[1,53],$V8=[1,28],$V9=[1,56],$Va=[1,39],$Vb=[1,40],$Vc=[1,41],$Vd=[1,46],$Ve=[1,47],$Vf=[1,42],$Vg=[1,43],$Vh=[1,45],$Vi=[1,54],$Vj=[1,55],$Vk=[5,26,42,43,46,47,48,49,50,56,67,88,91,95,98,100,102,103,104,105,106,110,111,112],$Vl=[1,87],$Vm=[1,88],$Vn=[1,91],$Vo=[1,99],$Vp=[1,94],$Vq=[1,96],$Vr=[1,97],$Vs=[1,98],$Vt=[1,100],$Vu=[1,93],$Vv=[1,95],$Vw=[1,133],$Vx=[1,132],$Vy=[1,123],$Vz=[1,124],$VA=[1,125],$VB=[1,126],$VC=[1,127],$VD=[1,128],$VE=[1,129],$VF=[1,130],$VG=[1,131],$VH=[1,134],$VI=[1,135],$VJ=[1,136],$VK=[1,137],$VL=[14,53,54,89,90,101,108,109,116,117,118,119,120,121,122,123,124,125,126,127],$VM=[1,146],$VN=[1,144],$VO=[1,145],$VP=[1,147],$VQ=[1,152],$VR=[1,151],$VS=[1,153],$VT=[1,158],$VU=[1,157],$VV=[1,159],$VW=[1,164],$VX=[1,163],$VY=[1,165],$VZ=[1,170],$V_=[1,169],$V$=[1,171],$V01=[14,53],$V11=[2,128],$V21=[5,26,42,43,46,47,48,49,50,56,67,88,91,93,95,98,100,102,103,104,105,106,110,111,112],$V31=[14,53,54,101,108,116,119,121,122,123,126,127],$V41=[1,212],$V51=[1,213],$V61=[1,214],$V71=[1,215],$V81=[1,216],$V91=[1,231],$Va1=[1,232],$Vb1=[14,53,54,101,108,109,116,117,118,119,120,121,122,123,126,127],$Vc1=[14,53,54,101,116,121,122,123,126,127],$Vd1=[14,54,67],$Ve1=[1,281],$Vf1=[1,282],$Vg1=[53,54],$Vh1=[1,318],$Vi1=[67,98,100],$Vj1=[54,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"VARIABLES":7,"COMENTARIOS":8,"VECTORES":9,"LISTAS":10,"IF":11,"SWITCH":12,"BREAK":13,"P_PUNTOYCOMA":14,"WHILE":15,"FOR":16,"INCRE_DECRE":17,"DO_WHILE":18,"CONTINUE":19,"RETURN":20,"FUNCIONES":21,"METODOS":22,"WRITE":23,"START":24,"TERNARIO":25,"CONDICION":26,"VARINT":27,"VARDOUBLE":28,"VARBOOLEAN":29,"VARCHAR":30,"VARSTRING":31,"VECTORINT":32,"VECTORSTRING":33,"VECTORCHAR":34,"VECTORBOOLEAN":35,"VECTORDOUBLE":36,"LISTAINT":37,"LISTASTRING":38,"LISTACHAR":39,"LISTABOOLEAN":40,"LISTADOUBLE":41,"P_INT":42,"P_ID":43,"PARAMETROS":44,"BLOQUE":45,"P_STRING":46,"P_CHAR":47,"P_BOOLEAN":48,"P_DOUBLE":49,"P_VOID":50,"P_PAR1":51,"TIPOPARAMETRO":52,"P_PAR2":53,"P_COMA":54,"TIPO":55,"P_COMENINICIO":56,"P_TODO":57,"P_COMENFINAL":58,"P_CORCHETE1":59,"P_CORCHETE2":60,"P_IGUAL":61,"VECINT":62,"P_NEW":63,"P_ENTERO":64,"P_LLAVE1":65,"VALORESINT":66,"P_LLAVE2":67,"VECSTRING":68,"VALORESSTRING":69,"P_COMILLA":70,"VECCHAR":71,"VALORESCHAR":72,"P_APOSTROFE":73,"P_CARACTER":74,"VECBOOLEAN":75,"VALORESBOOLEAN":76,"TRUEFALSE":77,"VECDOUBLE":78,"VALORESDOUBLE":79,"P_NUMERO":80,"VARIABLEINT":81,"VARIABLEDOUBLE":82,"VARIABLEBOOLEAN":83,"P_TRUE":84,"P_FALSE":85,"VARIABLESTRING":86,"VARIABLECHAR":87,"P_DYNAMICLIST":88,"P_MENOR":89,"P_MAYOR":90,"P_IF":91,"EXP":92,"P_ELSE":93,"ELSE":94,"P_SWITCH":95,"BLOQUESWITCH":96,"LISTCASE":97,"P_CASE":98,"BSW":99,"P_DEFAULT":100,"P_DOSPUNTOS":101,"P_BREAK":102,"P_CONTINUE":103,"P_RETURN":104,"P_WHILE":105,"P_FOR":106,"ASIG_DEC":107,"P_SUMA":108,"P_RESTA":109,"P_DO":110,"P_WRITELINE":111,"P_START":112,"P_WITH":113,"VALUE":114,"LISTVALUE":115,"P_PREGUNTA":116,"P_MULTIPLICACION":117,"P_DIVISION":118,"P_POTENCIA":119,"P_MODULO":120,"P_DIFERENTE":121,"P_IGUALACION":122,"P_IGUALR":123,"P_MAYORIGUAL":124,"P_MENORIGUAL":125,"P_AND":126,"P_OR":127,"P_NOT":128,"Tok_string":129,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"P_PUNTOYCOMA",26:"CONDICION",42:"P_INT",43:"P_ID",46:"P_STRING",47:"P_CHAR",48:"P_BOOLEAN",49:"P_DOUBLE",50:"P_VOID",51:"P_PAR1",53:"P_PAR2",54:"P_COMA",56:"P_COMENINICIO",57:"P_TODO",58:"P_COMENFINAL",59:"P_CORCHETE1",60:"P_CORCHETE2",61:"P_IGUAL",63:"P_NEW",64:"P_ENTERO",65:"P_LLAVE1",67:"P_LLAVE2",70:"P_COMILLA",73:"P_APOSTROFE",74:"P_CARACTER",80:"P_NUMERO",84:"P_TRUE",85:"P_FALSE",88:"P_DYNAMICLIST",89:"P_MENOR",90:"P_MAYOR",91:"P_IF",93:"P_ELSE",95:"P_SWITCH",98:"P_CASE",100:"P_DEFAULT",101:"P_DOSPUNTOS",102:"P_BREAK",103:"P_CONTINUE",104:"P_RETURN",105:"P_WHILE",106:"P_FOR",108:"P_SUMA",109:"P_RESTA",110:"P_DO",111:"P_WRITELINE",112:"P_START",113:"P_WITH",116:"P_PREGUNTA",117:"P_MULTIPLICACION",118:"P_DIVISION",119:"P_POTENCIA",120:"P_MODULO",121:"P_DIFERENTE",122:"P_IGUALACION",123:"P_IGUALR",124:"P_MAYORIGUAL",125:"P_MENORIGUAL",126:"P_AND",127:"P_OR",128:"P_NOT",129:"Tok_string"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[7,2],[7,2],[7,2],[7,2],[7,2],[9,2],[9,2],[9,2],[9,2],[9,2],[10,2],[10,2],[10,2],[10,2],[10,2],[21,4],[21,4],[21,4],[21,4],[21,4],[22,4],[44,3],[44,2],[52,4],[52,2],[55,1],[55,1],[55,1],[55,1],[55,1],[8,3],[32,6],[62,5],[62,3],[66,3],[66,1],[33,6],[68,5],[68,3],[69,5],[69,3],[34,6],[71,5],[71,3],[72,5],[72,3],[35,6],[75,5],[75,3],[76,3],[76,1],[36,6],[78,5],[78,3],[79,3],[79,1],[27,3],[81,3],[81,1],[81,2],[28,3],[82,3],[82,1],[82,2],[29,3],[83,3],[83,1],[83,2],[77,1],[77,1],[31,3],[86,3],[86,1],[86,4],[30,3],[87,3],[87,1],[87,4],[37,11],[38,11],[39,11],[40,11],[41,11],[11,5],[11,7],[94,1],[94,1],[12,5],[96,2],[96,3],[97,4],[97,3],[97,2],[99,2],[99,1],[13,1],[19,1],[20,1],[20,2],[15,5],[16,9],[107,4],[107,3],[17,3],[17,3],[17,3],[18,6],[45,3],[45,2],[23,4],[24,4],[114,3],[114,2],[115,3],[115,1],[25,7],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,2],[92,3],[92,1],[92,1],[92,1],[92,1],[92,1],[92,2],[92,3],[92,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149: case 150: case 151: case 152: case 153:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-1].last_column);this.$.addChilds($$[$0-2],new AST_Node("op",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 154:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("op",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 155:
this.$=$$[$0-1]
break;
case 156:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);
                                         var text = $$[$0].substr(0,$$[$0].length);
                                         text=text.replace(/\\n/g,"\n");
                                         text=text.replace(/\\t/g,"\t");
                                         text=text.replace(/\\r/g,"\r");
                                         text=text.replace(/\\\\/g,"\\");
                                         text=text.replace(/\\\"/g,"\"");
                                        this.$.addChilds(new AST_Node("string",text,this._$.first_line,_$[$0].last_column));
break;
case 157:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("numero",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 158:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("true",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 159:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("false",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 160:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("id",$$[$0],this._$.first_line,_$[$0].last_column));
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V0,27:23,28:24,29:25,30:26,31:27,32:29,33:30,34:31,35:32,36:33,37:34,38:35,39:36,40:37,41:38,42:$V1,43:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:$V7,56:$V8,88:$V9,91:$Va,95:$Vb,102:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,110:$Vh,111:$Vi,112:$Vj},{1:[3]},{5:[1,57],6:58,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V0,27:23,28:24,29:25,30:26,31:27,32:29,33:30,34:31,35:32,36:33,37:34,38:35,39:36,40:37,41:38,42:$V1,43:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:$V7,56:$V8,88:$V9,91:$Va,95:$Vb,102:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,110:$Vh,111:$Vi,112:$Vj},o($Vk,[2,3]),o($Vk,[2,4]),o($Vk,[2,5]),o($Vk,[2,6]),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),{14:[1,59]},o($Vk,[2,11]),o($Vk,[2,12]),{14:[1,60]},{14:[1,61]},{14:[1,62]},{14:[1,63]},o($Vk,[2,17]),o($Vk,[2,18]),{14:[1,64]},{14:[1,65]},{14:[1,66]},o($Vk,[2,22]),{14:[1,67]},{14:[1,68]},{14:[1,69]},{14:[1,70]},{14:[1,71]},{57:[1,72]},{14:[1,73]},{14:[1,74]},{14:[1,75]},{14:[1,76]},{14:[1,77]},{14:[1,78]},{14:[1,79]},{14:[1,80]},{14:[1,81]},{14:[1,82]},{51:[1,83]},{51:[1,84]},{14:[2,118]},{51:[1,85]},{51:[1,86]},{61:[1,89],108:$Vl,109:$Vm},{45:90,65:$Vn},{14:[2,119]},{14:[2,120],43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:92,109:$Vt,128:$Vu,129:$Vv},{43:[1,101]},{43:[1,102]},{43:[1,103]},{43:[1,104]},{43:[1,105]},{43:[1,106]},{51:[1,107]},{113:[1,108]},{89:[1,109]},{1:[2,1]},o($Vk,[2,2]),o($Vk,[2,10]),o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,19]),o($Vk,[2,20]),o($Vk,[2,21]),o($Vk,[2,23]),o($Vk,[2,24]),o($Vk,[2,25]),o($Vk,[2,26]),o($Vk,[2,27]),{58:[1,110]},o($Vk,[2,28]),o($Vk,[2,29]),o($Vk,[2,30]),o($Vk,[2,31]),o($Vk,[2,32]),o($Vk,[2,33]),o($Vk,[2,34]),o($Vk,[2,35]),o($Vk,[2,36]),o($Vk,[2,37]),{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:111,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:112,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:113,109:$Vt,128:$Vu,129:$Vv},{42:[1,115],43:[1,116],107:114},{108:[1,117]},{109:[1,118]},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:119,109:$Vt,128:$Vu,129:$Vv},{105:[1,120]},{4:121,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V0,27:23,28:24,29:25,30:26,31:27,32:29,33:30,34:31,35:32,36:33,37:34,38:35,39:36,40:37,41:38,42:$V1,43:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:$V7,56:$V8,67:[1,122],88:$V9,91:$Va,95:$Vb,102:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,110:$Vh,111:$Vi,112:$Vj},{14:[2,121],89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ,127:$VK},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:138,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:139,109:$Vt,128:$Vu,129:$Vv},o($VL,[2,156]),o($VL,[2,157]),o($VL,[2,158]),o($VL,[2,159]),o($VL,[2,160]),{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:140,109:$Vt,128:$Vu,129:$Vv},{43:$VM,44:141,51:$VN,54:$VO,59:[1,143],61:$VP,81:142},{43:$VQ,44:148,51:$VN,54:$VR,59:[1,150],61:$VS,86:149},{43:$VT,44:154,51:$VN,54:$VU,59:[1,156],61:$VV,87:155},{43:$VW,44:160,51:$VN,54:$VX,59:[1,162],61:$VY,83:161},{43:$VZ,44:166,51:$VN,54:$V_,59:[1,168],61:$V$,82:167},{44:172,51:$VN},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:173,109:$Vt,128:$Vu,129:$Vv},{43:[1,174]},{42:[1,175],46:[1,176],47:[1,177],48:[1,178],49:[1,179]},o($Vk,[2,53]),{53:[1,180],89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ,127:$VK},{53:[1,181],89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ,127:$VK},{53:[1,182],89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ,127:$VK},{14:[1,183]},{43:[1,184]},{61:[1,185]},o($V01,[2,126]),o($V01,[2,127]),{14:$V11,89:$Vw,90:$Vx,108:$Vy,109:$Vz,116:[1,186],117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ,127:$VK},{51:[1,187]},{6:58,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V0,27:23,28:24,29:25,30:26,31:27,32:29,33:30,34:31,35:32,36:33,37:34,38:35,39:36,40:37,41:38,42:$V1,43:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:$V7,56:$V8,67:[1,188],88:$V9,91:$Va,95:$Vb,102:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,110:$Vh,111:$Vi,112:$Vj},o($V21,[2,131]),{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:189,108:[1,190],109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:191,109:[1,192],128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:193,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:194,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:195,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:196,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:197,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:198,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:199,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:200,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:201,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:202,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:203,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:204,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:205,109:$Vt,128:$Vu,129:$Vv},o($VL,[2,154]),{53:[1,206],89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ,127:$VK},o($V31,[2,161],{89:$Vw,90:$Vx,109:$Vz,117:$VA,118:$VB,120:$VD,124:$VH,125:$VI}),{45:207,65:$Vn},{14:[2,79]},{60:[1,208]},{42:$V41,46:$V51,47:$V61,48:$V71,49:$V81,52:209,53:[1,210],55:211},{43:[1,217]},{14:[2,81]},{64:[1,218]},{45:219,65:$Vn},{14:[2,93]},{60:[1,220]},{43:[1,221]},{14:[2,95]},{70:[1,222]},{45:223,65:$Vn},{14:[2,97]},{60:[1,224]},{43:[1,225]},{14:[2,99]},{73:[1,226]},{45:227,65:$Vn},{14:[2,87]},{60:[1,228]},{43:[1,229]},{14:[2,89]},{77:230,84:$V91,85:$Va1},{45:233,65:$Vn},{14:[2,83]},{60:[1,234]},{43:[1,235]},{14:[2,85]},{80:[1,236]},{45:237,65:$Vn},{53:[1,238],89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ,127:$VK},{51:[1,240],114:239},{90:[1,241]},{90:[1,242]},{90:[1,243]},{90:[1,244]},{90:[1,245]},{45:246,65:$Vn},{65:[1,248],96:247},{45:249,65:$Vn},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:250,109:$Vt,128:$Vu,129:$Vv},{61:[1,251]},{80:[1,252]},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:253,109:$Vt,128:$Vu,129:$Vv},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:254,109:$Vt,128:$Vu,129:$Vv},o($V21,[2,130]),o($V31,[2,139],{89:$Vw,90:$Vx,109:$Vz,117:$VA,118:$VB,120:$VD,124:$VH,125:$VI}),o($VL,[2,162]),o($V31,[2,140],{89:$Vw,90:$Vx,109:$Vz,117:$VA,118:$VB,120:$VD,124:$VH,125:$VI}),o([14,53,54,89,90,101,108,116,117,118,119,120,121,122,123,124,125,126,127],[2,163],{92:140,43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,109:$Vt,128:$Vu,129:$Vv}),o($Vb1,[2,141],{89:$Vw,90:$Vx,124:$VH,125:$VI}),o($Vb1,[2,142],{89:$Vw,90:$Vx,124:$VH,125:$VI}),o($Vc1,[2,143],{89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,120:$VD,124:$VH,125:$VI}),o($Vb1,[2,144],{89:$Vw,90:$Vx,124:$VH,125:$VI}),o($Vc1,[2,145],{89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,124:$VH,125:$VI}),o($Vc1,[2,146],{89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,124:$VH,125:$VI}),o($Vc1,[2,147],{89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,124:$VH,125:$VI}),o($VL,[2,148]),o($VL,[2,149]),o($VL,[2,150]),o($VL,[2,151]),o([14,53,54,101,116,126,127],[2,152],{89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI}),o([14,53,54,101,116,127],[2,153],{89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ}),o($VL,[2,155]),o($Vk,[2,38]),{61:[1,255]},{53:[1,256],54:[1,257]},{65:[2,45]},{43:[1,258]},{43:[2,48]},{43:[2,49]},{43:[2,50]},{43:[2,51]},{43:[2,52]},{43:$VM,54:$VO,61:$VP,81:259},{14:[2,82]},o($Vk,[2,39]),{61:[1,260]},{43:$VQ,54:$VR,61:$VS,86:261},{57:[1,262]},o($Vk,[2,40]),{61:[1,263]},{43:$VT,54:$VU,61:$VV,87:264},{74:[1,265]},o($Vk,[2,41]),{61:[1,266]},{43:$VW,54:$VX,61:$VY,83:267},{14:[2,90]},o($Vd1,[2,91]),o($Vd1,[2,92]),o($Vk,[2,42]),{61:[1,268]},{43:$VZ,54:$V_,61:$V$,82:269},{14:[2,86]},o($Vk,[2,43]),{14:[2,132]},{14:[2,133]},{43:$Vo,51:$Vp,53:[1,271],80:$Vq,84:$Vr,85:$Vs,92:272,109:$Vt,115:270,128:$Vu,129:$Vv},{43:[1,273]},{43:[1,274]},{43:[1,275]},{43:[1,276]},{43:[1,277]},o($Vk,[2,106],{93:[1,278]}),o($Vk,[2,110]),{67:[1,279],97:280,98:$Ve1,100:$Vf1},o($Vk,[2,122]),{14:[1,283],89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ,127:$VK},{80:[1,284]},{14:[2,125]},{89:$Vw,90:$Vx,101:[1,285],108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ,127:$VK},{53:[1,286],89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ,127:$VK},{62:287,63:[1,288],65:[1,289]},{65:[2,44]},{42:$V41,46:$V51,47:$V61,48:$V71,49:$V81,55:290},o($Vg1,[2,47]),{14:[2,80]},{63:[1,292],65:[1,293],68:291},{14:[2,94]},{70:[1,294]},{63:[1,296],65:[1,297],71:295},{14:[2,98]},{73:[1,298]},{63:[1,300],65:[1,301],75:299},{14:[2,88]},{63:[1,303],65:[1,304],78:302},{14:[2,84]},{53:[1,305],54:[1,306]},{14:[2,135]},o($Vg1,[2,137],{89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ,127:$VK}),{61:[1,307]},{61:[1,308]},{61:[1,309]},{61:[1,310]},{61:[1,311]},{11:313,45:314,65:$Vn,91:$Va,94:312},o($Vk,[2,111]),{67:[1,315]},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:316,109:$Vt,128:$Vu,129:$Vv},{99:317,101:$Vh1},{17:319,43:[1,320]},{14:[2,124]},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:321,109:$Vt,128:$Vu,129:$Vv},{14:[2,129]},{14:[2,54]},{42:[1,322]},{64:[1,324],66:323},{43:[1,325]},{14:[2,59]},{46:[1,326]},{69:327,70:[1,328]},{14:[2,96]},{14:[2,64]},{47:[1,329]},{72:330,73:[1,331]},{14:[2,100]},{14:[2,69]},{48:[1,332]},{76:333,77:334,84:$V91,85:$Va1},{14:[2,74]},{49:[1,335]},{79:336,80:[1,337]},{14:[2,134]},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:338,109:$Vt,128:$Vu,129:$Vv},{63:[1,339]},{63:[1,340]},{63:[1,341]},{63:[1,342]},{63:[1,343]},o($Vk,[2,107]),o($Vk,[2,108]),o($Vk,[2,109]),o($Vk,[2,112]),{89:$Vw,90:$Vx,99:344,101:$Vh1,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ,127:$VK},{67:[2,115]},o($Vi1,[2,117],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,27:23,28:24,29:25,30:26,31:27,32:29,33:30,34:31,35:32,36:33,37:34,38:35,39:36,40:37,41:38,4:345,26:$V0,42:$V1,43:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:$V7,56:$V8,88:$V9,91:$Va,95:$Vb,102:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,110:$Vh,111:$Vi,112:$Vj}),{53:[1,346]},{61:[1,347],108:$Vl,109:$Vm},{14:[2,138],89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ,127:$VK},{59:[1,348]},{54:[1,350],67:[1,349]},o($Vj1,[2,58]),o($Vg1,[2,46]),{59:[1,351]},{54:[1,353],67:[1,352]},{57:[1,354]},{59:[1,355]},{54:[1,357],67:[1,356]},{74:[1,358]},{59:[1,359]},{54:[1,361],67:[1,360]},o($Vj1,[2,73]),{59:[1,362]},{54:[1,364],67:[1,363]},o($Vj1,[2,78]),o($Vg1,[2,136],{89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ,127:$VK}),{88:[1,365]},{88:[1,366]},{88:[1,367]},{88:[1,368]},{88:[1,369]},{67:[2,114],97:370,98:$Ve1,100:$Vf1},o($Vi1,[2,116],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,27:23,28:24,29:25,30:26,31:27,32:29,33:30,34:31,35:32,36:33,37:34,38:35,39:36,40:37,41:38,6:58,26:$V0,42:$V1,43:$V2,46:$V3,47:$V4,48:$V5,49:$V6,50:$V7,56:$V8,88:$V9,91:$Va,95:$Vb,102:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,110:$Vh,111:$Vi,112:$Vj}),{45:371,65:$Vn},{43:$Vo,51:$Vp,80:$Vq,84:$Vr,85:$Vs,92:372,109:$Vt,128:$Vu,129:$Vv},{64:[1,373]},{14:[2,56]},{64:[1,374]},{64:[1,375]},{14:[2,61]},{70:[1,376]},{70:[1,377]},{64:[1,378]},{14:[2,66]},{73:[1,379]},{73:[1,380]},{64:[1,381]},{14:[2,71]},{77:382,84:$V91,85:$Va1},{64:[1,383]},{14:[2,76]},{80:[1,384]},{89:[1,385]},{89:[1,386]},{89:[1,387]},{89:[1,388]},{89:[1,389]},{67:[2,113]},o($Vk,[2,123]),{53:$V11,89:$Vw,90:$Vx,108:$Vy,109:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE,122:$VF,123:$VG,124:$VH,125:$VI,126:$VJ,127:$VK},{60:[1,390]},o($Vj1,[2,57]),{60:[1,391]},{57:[1,392]},o($Vj1,[2,63]),{60:[1,393]},{74:[1,394]},o($Vj1,[2,68]),{60:[1,395]},o($Vj1,[2,72]),{60:[1,396]},o($Vj1,[2,77]),{42:[1,397]},{46:[1,398]},{47:[1,399]},{48:[1,400]},{49:[1,401]},{14:[2,55]},{14:[2,60]},{70:[1,402]},{14:[2,65]},{73:[1,403]},{14:[2,70]},{14:[2,75]},{90:[1,404]},{90:[1,405]},{90:[1,406]},{90:[1,407]},{90:[1,408]},o($Vj1,[2,62]),o($Vj1,[2,67]),{14:[2,101]},{14:[2,102]},{14:[2,103]},{14:[2,104]},{14:[2,105]}],
defaultActions: {41:[2,118],46:[2,119],57:[2,1],142:[2,79],146:[2,81],149:[2,93],152:[2,95],155:[2,97],158:[2,99],161:[2,87],164:[2,89],167:[2,83],170:[2,85],210:[2,45],212:[2,48],213:[2,49],214:[2,50],215:[2,51],216:[2,52],218:[2,82],230:[2,90],236:[2,86],238:[2,132],239:[2,133],252:[2,125],256:[2,44],259:[2,80],261:[2,94],264:[2,98],267:[2,88],269:[2,84],271:[2,135],284:[2,124],286:[2,129],287:[2,54],291:[2,59],294:[2,96],295:[2,64],298:[2,100],299:[2,69],302:[2,74],305:[2,134],317:[2,115],349:[2,56],352:[2,61],356:[2,66],360:[2,71],363:[2,76],370:[2,113],390:[2,55],391:[2,60],393:[2,65],395:[2,70],396:[2,75],404:[2,101],405:[2,102],406:[2,103],407:[2,104],408:[2,105]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    function AST_Node(tag,value,fila,columna){
        this.tag = tag;
        this.value = value;
        this.fila = fila;
        this.columna = columna;

        this.childs = [];

        this.addChilds = addChilds;
        this.getSon = getSon;

        function addChilds(){
            for (var i = 0; i < arguments.length; i++) {
                this.childs.push(arguments[i]);
                if (arguments[i]!== null){
                    arguments[i].padre = this;
                }
            }
        }  

        function getSon(pos){
            if(pos > this.hijos.length - 1) return null;
            return this.hijos[pos];
        }
    };

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran los espacios en blanco
break;
case 1:// Comentario linea actual
break;
case 2:return 42
break;
case 3:return 49
break;
case 4:return 48
break;
case 5:return 47
break;
case 6:return 46 
break;
case 7:return 63  
break;
case 8:return 88 
break;
case 9:return 'P_APPEND'
break;
case 10:return 'P_GETVALUE'
break;
case 11:return 'P_SETVALUE'
break;
case 12:return 91
break;
case 13:return 93
break;
case 14:return 95
break;
case 15:return 98
break;
case 16:return 100
break;
case 17:return 102
break;
case 18:return 105
break;
case 19:return 106
break;
case 20:return 110
break;
case 21:return 103
break;
case 22:return 104
break;
case 23:return 50
break;
case 24:return 111
break;
case 25:return 'P_TOLOWER'
break;
case 26:return 'P_TOUPPER'
break;
case 27:return 'P_LENGHT'
break;
case 28:return 'P_TRUNCATE'
break;
case 29:return 'P_ROUND'
break;
case 30:return 'P_TYPEOF'
break;
case 31:return 'P_TOSTRING'
break;
case 32:return 'P_TOCHARARRAY'
break;
case 33:return 112
break;
case 34:return 113
break;
case 35:return 84
break;
case 36:return 85
break;
case 37:return 108
break;
case 38:return 109
break;
case 39:return 117
break;
case 40:return 118
break;
case 41:return 119
break;
case 42:return 120
break;
case 43:return 61
break;
case 44:return 122
break;
case 45:return 121
break;
case 46:return 89
break;
case 47:return 125
break;
case 48:return 90
break;
case 49:return 124
break;
case 50:return 127
break;
case 51:return 126
break;
case 52:return 'P_SAND'
break;
case 53:return 'P_SOR'
break;
case 54:return 128
break;
case 55:return 51
break;
case 56:return 53
break;
case 57:return 65
break;
case 58:return 67
break;
case 59:return 59
break;
case 60:return 60
break;
case 61:return 'P_PUNTO'
break;
case 62:return 54
break;
case 63:return 14
break;
case 64:return 101
break;
case 65:return 116
break;
case 66:return 56
break;
case 67:return 58
break;
case 68:return  'P_SALTOLINEA'
break;
case 69:return  'P_BARRAINVERTIDA'
break;
case 70:return  'P_COMILLADOBLE';
break;
case 71:return  'P_COMILLASIMPLE';
break;
case 72:return  'P_TABULACION'
break;
case 73:return 70;
break;
case 74:return  'P_APOSTROFE';
break;
case 75:return 80;
break;
case 76:return 64;
break;
case 77:return 43;
break;
case 78:return 'P_ENT';
break;
case 79:return  'P_ALFABETO';
break;
case 80:return  'P_CARACTER';
break;
case 81:return  'P_TODO';
break;
case 82: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 129; 
break;
case 83:return 5;
break;
case 84: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                          Func_Error.ObtenerInstancia().insertar(new Cons_Error("Lexico","Caracter: \" "+yy_.yytext+"\" no es valido" ,yy_.yylloc.first_line,yy_.yylloc.first_column));
                                          return null; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:string\b)/,/^(?:new\b)/,/^(?:dynamiclist\b)/,/^(?:append\b)/,/^(?:getvalue\b)/,/^(?:setvalue\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:writeline\b)/,/^(?:tolower\b)/,/^(?:toupper\b)/,/^(?:lenght\b)/,/^(?:truncate\b)/,/^(?:round\b)/,/^(?:typeof\b)/,/^(?:tostring\b)/,/^(?:tochararray\b)/,/^(?:start\b)/,/^(?:with\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\|)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\?)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:\\n)/,/^(?:\\)/,/^(?:[\"])/,/^(?:[\'])/,/^(?:\\t)/,/^(?:["])/,/^(?:['])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:[0-9])/,/^(?:([a-zA-Z_]))/,/^(?:[P_ALFABETO|P_ENT|P_TABULACION|P_COMILLASIMPLE|P_COMILLADOBLE|P_BARRAINVERTIDA|P_SALTOLINEA|\r\nP_PREGUNTA|P_DOSPUNTOS|P_PUNTOYCOMA|P_COMA|P_PUNTO|P_CORCHETE2|\r\n  P_CORCHETE1|P_LLAVE2|P_LLAVE1|P_PAR2|P_PAR1|P_NOT|P_SAND|P_OR|P_MAYOR|P_MENOR|P_IGUAL|P_MODULO|\r\n  P_POTENCIA|P_DIVISION|P_MULTIPLICACION|P_RESTA|P_SUMA])/,/^(?:[P_ALFABETO|P_ENT|P_TABULACION|P_COMILLASIMPLE|P_COMILLADOBLE|P_BARRAINVERTIDA|P_SALTOLINEA|\r\nP_PREGUNTA|P_DOSPUNTOS|P_PUNTOYCOMA|P_COMA|P_PUNTO|P_CORCHETE2|\r\n  P_CORCHETE1|P_LLAVE2|P_LLAVE1|P_PAR2|P_PAR1|P_NOT|P_SAND|P_OR|P_MAYOR|P_MENOR|P_IGUAL|P_MODULO|\r\n  P_POTENCIA|P_DIVISION|P_MULTIPLICACION|P_RESTA|P_SUMA|P_AND|P_OR|P_MAYORIGUAL|P_MENORIGUAL|P_DIFERENTE|\r\n  P_IGUALACION|P_FALSE|P_TRUE|P_WITH|P_START|P_TOCHARARRAY|P_TOSTRING|P_TYPEOF|P_ROUND|P_TRUNCATE|\r\n  P_LENGHT|P_TOUPPER|P_TOLOWER|P_WRITELINE|P_VOID|P_RETURN|P_CONTINUE|P_DO|P_FOR|P_WHILE|P_BREAK|\r\n  P_DEFAULT|P_CASE|P_SWITCH|P_ELSE|P_IF|P_SETVALUE|P_GETVALUE|P_APPEND|P_DYNAMICLIST|P_NEW|\r\n  P_STRING|P_CHAR|P_BOOLEAN|P_DOUBLE|P_INT]*)/,/^(?:"[^\"]*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}