/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,26],$V2=[1,30],$V3=[1,29],$V4=[1,28],$V5=[1,27],$V6=[1,31],$V7=[1,25],$V8=[5,27,30,39,43,47,52,56,67,70],$V9=[1,50],$Va=[1,47],$Vb=[1,48],$Vc=[1,49],$Vd=[1,45],$Ve=[1,44],$Vf=[1,46],$Vg=[1,55],$Vh=[1,54],$Vi=[1,53],$Vj=[1,60],$Vk=[1,59],$Vl=[1,58],$Vm=[1,65],$Vn=[1,64],$Vo=[1,63],$Vp=[1,70],$Vq=[1,69],$Vr=[1,68],$Vs=[1,75],$Vt=[1,74],$Vu=[1,73],$Vv=[1,92],$Vw=[1,91],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[68,69,73,77,78,79,80,81,82,83,84,85,86,87,88,89],$VL=[1,108],$VM=[1,109],$VN=[1,122],$VO=[38,41,42],$VP=[73,77,81,83,84,85,88,89],$VQ=[73,77,78,79,80,81,82,83,84,85,88,89],$VR=[73,83,84,85,88,89],$VS=[5,27,30,39,43,47,52,56,67,70,75],$VT=[41,42];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"VARIABLES":7,"COMENTARIOS":8,"VECTORES":9,"LISTAS":10,"IF":11,"VARINT":12,"VARDOUBLE":13,"VARBOOLEAN":14,"VARCHAR":15,"VARSTRING":16,"VECTORINT":17,"VECTORSTRING":18,"VECTORCHAR":19,"VECTORBOOLEAN":20,"VECTORDOUBLE":21,"LISTAINT":22,"LISTASTRING":23,"LISTACHAR":24,"LISTABOOLEAN":25,"LISTADOUBLE":26,"P_COMENINICIO":27,"P_TODO":28,"P_COMENFINAL":29,"P_INT":30,"P_ID":31,"P_CORCHETE1":32,"P_CORCHETE2":33,"P_IGUAL":34,"VECINT":35,"P_NEW":36,"P_ENTERO":37,"P_PUNTOYCOMA":38,"P_LLAVE1":39,"VALORESINT":40,"P_LLAVE2":41,"P_COMA":42,"P_STRING":43,"VECSTRING":44,"VALORESSTRING":45,"P_COMILLA":46,"P_CHAR":47,"VECCHAR":48,"VALORESCHAR":49,"P_APOSTROFE":50,"P_CARACTER":51,"P_BOOLEAN":52,"VECBOOLEAN":53,"VALORESBOOLEAN":54,"TRUEFALSE":55,"P_DOUBLE":56,"VECDOUBLE":57,"VALORESDOUBLE":58,"P_NUMERO":59,"VARIABLEINT":60,"VARIABLEDOUBLE":61,"VARIABLEBOOLEAN":62,"P_TRUE":63,"P_FALSE":64,"VARIABLESTRING":65,"VARIABLECHAR":66,"P_DYNAMICLIST":67,"P_MENOR":68,"P_MAYOR":69,"P_IF":70,"P_PAR1":71,"EXP":72,"P_PAR2":73,"BLOQUE":74,"P_ELSE":75,"ELSE":76,"P_SUMA":77,"P_RESTA":78,"P_MULTIPLICACION":79,"P_DIVISION":80,"P_POTENCIA":81,"P_MODULO":82,"P_DIFERENTE":83,"P_IGUALACION":84,"P_IGUALR":85,"P_MAYORIGUAL":86,"P_MENORIGUAL":87,"P_AND":88,"P_OR":89,"P_NOT":90,"Tok_string":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",27:"P_COMENINICIO",28:"P_TODO",29:"P_COMENFINAL",30:"P_INT",31:"P_ID",32:"P_CORCHETE1",33:"P_CORCHETE2",34:"P_IGUAL",36:"P_NEW",37:"P_ENTERO",38:"P_PUNTOYCOMA",39:"P_LLAVE1",41:"P_LLAVE2",42:"P_COMA",43:"P_STRING",46:"P_COMILLA",47:"P_CHAR",50:"P_APOSTROFE",51:"P_CARACTER",52:"P_BOOLEAN",56:"P_DOUBLE",59:"P_NUMERO",63:"P_TRUE",64:"P_FALSE",67:"P_DYNAMICLIST",68:"P_MENOR",69:"P_MAYOR",70:"P_IF",71:"P_PAR1",73:"P_PAR2",75:"P_ELSE",77:"P_SUMA",78:"P_RESTA",79:"P_MULTIPLICACION",80:"P_DIVISION",81:"P_POTENCIA",82:"P_MODULO",83:"P_DIFERENTE",84:"P_IGUALACION",85:"P_IGUALR",86:"P_MAYORIGUAL",87:"P_MENORIGUAL",88:"P_AND",89:"P_OR",90:"P_NOT",91:"Tok_string"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[9,1],[9,1],[9,1],[9,1],[9,1],[10,1],[10,1],[10,1],[10,1],[10,1],[8,3],[17,6],[35,6],[35,4],[40,3],[40,1],[18,6],[44,6],[44,4],[45,5],[45,3],[19,6],[48,6],[48,4],[49,5],[49,3],[20,6],[53,6],[53,4],[54,3],[54,1],[21,6],[57,6],[57,4],[58,3],[58,1],[12,3],[60,3],[60,1],[60,3],[13,3],[61,3],[61,1],[61,3],[14,3],[62,3],[62,1],[62,3],[55,1],[55,1],[16,3],[65,3],[65,1],[65,5],[15,3],[66,3],[66,1],[66,5],[22,12],[23,12],[24,12],[25,12],[26,12],[11,5],[11,7],[76,1],[76,1],[74,3],[74,2],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,2],[72,3],[72,1],[72,1],[72,1],[72,1],[72,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-1].last_column);this.$.addChilds($$[$0-2],new AST_Node("op",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 98:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("op",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 99:
this.$=$$[$0-1]
break;
case 100:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);
                                         var text = $$[$0].substr(0,$$[$0].length);
                                         text=text.replace(/\\n/g,"\n");
                                         text=text.replace(/\\t/g,"\t");
                                         text=text.replace(/\\r/g,"\r");
                                         text=text.replace(/\\\\/g,"\\");
                                         text=text.replace(/\\\"/g,"\"");
                                        this.$.addChilds(new AST_Node("string",text,this._$.first_line,_$[$0].last_column));
break;
case 101:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("numero",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 102:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("true",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 103:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("false",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 104:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("id",$$[$0],this._$.first_line,_$[$0].last_column));
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:$V0,30:$V1,43:$V2,47:$V3,52:$V4,56:$V5,67:$V6,70:$V7},{1:[3]},{5:[1,32],6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:$V0,30:$V1,43:$V2,47:$V3,52:$V4,56:$V5,67:$V6,70:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),{28:[1,34]},o($V8,[2,14]),o($V8,[2,15]),o($V8,[2,16]),o($V8,[2,17]),o($V8,[2,18]),o($V8,[2,19]),o($V8,[2,20]),o($V8,[2,21]),o($V8,[2,22]),o($V8,[2,23]),{71:[1,35]},{31:[1,36]},{31:[1,37]},{31:[1,38]},{31:[1,39]},{31:[1,40]},{68:[1,41]},{1:[2,1]},o($V8,[2,2]),{29:[1,42]},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:43,90:$Ve,91:$Vf},{32:[1,52],34:$Vg,38:$Vh,42:$Vi,60:51},{32:[1,57],34:$Vj,38:$Vk,42:$Vl,61:56},{32:[1,62],34:$Vm,38:$Vn,42:$Vo,62:61},{32:[1,67],34:$Vp,38:$Vq,42:$Vr,66:66},{32:[1,72],34:$Vs,38:$Vt,42:$Vu,65:71},{30:[1,76],43:[1,77],47:[1,78],52:[1,79],56:[1,80]},o($V8,[2,24]),{68:$Vv,69:$Vw,73:[1,81],77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:97,90:$Ve,91:$Vf},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:98,90:$Ve,91:$Vf},o($VK,[2,100]),o($VK,[2,101]),o($VK,[2,102]),o($VK,[2,103]),o($VK,[2,104]),o($V8,[2,50]),{33:[1,99]},{31:[1,100]},o($V8,[2,52]),{37:[1,101]},o($V8,[2,54]),{33:[1,102]},{31:[1,103]},o($V8,[2,56]),{59:[1,104]},o($V8,[2,58]),{33:[1,105]},{31:[1,106]},o($V8,[2,60]),{55:107,63:$VL,64:$VM},o($V8,[2,68]),{33:[1,110]},{31:[1,111]},o($V8,[2,70]),{50:[1,112]},o($V8,[2,64]),{33:[1,113]},{31:[1,114]},o($V8,[2,66]),{46:[1,115]},{69:[1,116]},{69:[1,117]},{69:[1,118]},{69:[1,119]},{69:[1,120]},{39:$VN,74:121},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:123,90:$Ve,91:$Vf},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:124,90:$Ve,91:$Vf},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:125,90:$Ve,91:$Vf},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:126,90:$Ve,91:$Vf},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:127,90:$Ve,91:$Vf},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:128,90:$Ve,91:$Vf},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:129,90:$Ve,91:$Vf},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:130,90:$Ve,91:$Vf},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:131,90:$Ve,91:$Vf},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:132,90:$Ve,91:$Vf},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:133,90:$Ve,91:$Vf},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:134,90:$Ve,91:$Vf},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:135,90:$Ve,91:$Vf},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:136,90:$Ve,91:$Vf},{31:$V9,59:$Va,63:$Vb,64:$Vc,71:$Vd,72:137,90:$Ve,91:$Vf},o($VK,[2,98]),{68:$Vv,69:$Vw,73:[1,138],77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ},{34:[1,139]},{34:$Vg,38:$Vh,42:$Vi,60:140},{38:[1,141]},{34:[1,142]},{34:$Vj,38:$Vk,42:$Vl,61:143},{38:[1,144]},{34:[1,145]},{34:$Vm,38:$Vn,42:$Vo,62:146},{38:[1,147]},o($VO,[2,62]),o($VO,[2,63]),{34:[1,148]},{34:$Vp,38:$Vq,42:$Vr,66:149},{51:[1,150]},{34:[1,151]},{34:$Vs,38:$Vt,42:$Vu,65:152},{28:[1,153]},{31:[1,154]},{31:[1,155]},{31:[1,156]},{31:[1,157]},{31:[1,158]},o($V8,[2,77],{75:[1,159]}),{4:160,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:$V0,30:$V1,41:[1,161],43:$V2,47:$V3,52:$V4,56:$V5,67:$V6,70:$V7},o($VP,[2,83],{68:$Vv,69:$Vw,78:$Vy,79:$Vz,80:$VA,82:$VC,86:$VG,87:$VH}),o($VP,[2,84],{68:$Vv,69:$Vw,78:$Vy,79:$Vz,80:$VA,82:$VC,86:$VG,87:$VH}),o($VQ,[2,85],{68:$Vv,69:$Vw,86:$VG,87:$VH}),o($VQ,[2,86],{68:$Vv,69:$Vw,86:$VG,87:$VH}),o($VR,[2,87],{68:$Vv,69:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,82:$VC,86:$VG,87:$VH}),o($VQ,[2,88],{68:$Vv,69:$Vw,86:$VG,87:$VH}),o($VR,[2,89],{68:$Vv,69:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,86:$VG,87:$VH}),o($VR,[2,90],{68:$Vv,69:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,86:$VG,87:$VH}),o($VR,[2,91],{68:$Vv,69:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,86:$VG,87:$VH}),o($VK,[2,92]),o($VK,[2,93]),o($VK,[2,94]),o($VK,[2,95]),o([73,88,89],[2,96],{68:$Vv,69:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH}),o([73,89],[2,97],{68:$Vv,69:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI}),o($VK,[2,99]),{35:162,36:[1,163],39:[1,164]},o($V8,[2,51]),o($V8,[2,53]),{36:[1,166],39:[1,167],57:165},o($V8,[2,55]),o($V8,[2,57]),{36:[1,169],39:[1,170],53:168},o($V8,[2,59]),o($V8,[2,61]),{36:[1,172],39:[1,173],48:171},o($V8,[2,69]),{50:[1,174]},{36:[1,176],39:[1,177],44:175},o($V8,[2,65]),{46:[1,178]},{34:[1,179]},{34:[1,180]},{34:[1,181]},{34:[1,182]},{34:[1,183]},{11:185,39:$VN,70:$V7,74:186,76:184},{6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:$V0,30:$V1,39:[1,187],43:$V2,47:$V3,52:$V4,56:$V5,67:$V6,70:$V7},o($VS,[2,82]),o($V8,[2,25]),{30:[1,188]},{37:[1,190],40:189},o($V8,[2,45]),{56:[1,191]},{58:192,59:[1,193]},o($V8,[2,40]),{52:[1,194]},{54:195,55:196,63:$VL,64:$VM},o($V8,[2,35]),{47:[1,197]},{49:198,50:[1,199]},{38:[1,200]},o($V8,[2,30]),{43:[1,201]},{45:202,46:[1,203]},{38:[1,204]},{36:[1,205]},{36:[1,206]},{36:[1,207]},{36:[1,208]},{36:[1,209]},o($V8,[2,78]),o($V8,[2,79]),o($V8,[2,80]),o($VS,[2,81]),{32:[1,210]},{41:[1,211],42:[1,212]},o($VT,[2,29]),{32:[1,213]},{41:[1,214],42:[1,215]},o($VT,[2,49]),{32:[1,216]},{41:[1,217],42:[1,218]},o($VT,[2,44]),{32:[1,219]},{41:[1,220],42:[1,221]},{51:[1,222]},o($V8,[2,71]),{32:[1,223]},{41:[1,224],42:[1,225]},{28:[1,226]},o($V8,[2,67]),{67:[1,227]},{67:[1,228]},{67:[1,229]},{67:[1,230]},{67:[1,231]},{37:[1,232]},{38:[1,233]},{37:[1,234]},{37:[1,235]},{38:[1,236]},{59:[1,237]},{37:[1,238]},{38:[1,239]},{55:240,63:$VL,64:$VM},{37:[1,241]},{38:[1,242]},{50:[1,243]},{50:[1,244]},{37:[1,245]},{38:[1,246]},{46:[1,247]},{46:[1,248]},{68:[1,249]},{68:[1,250]},{68:[1,251]},{68:[1,252]},{68:[1,253]},{33:[1,254]},o($V8,[2,27]),o($VT,[2,28]),{33:[1,255]},o($V8,[2,47]),o($VT,[2,48]),{33:[1,256]},o($V8,[2,42]),o($VT,[2,43]),{33:[1,257]},o($V8,[2,37]),{51:[1,258]},o($VT,[2,39]),{33:[1,259]},o($V8,[2,32]),{28:[1,260]},o($VT,[2,34]),{30:[1,261]},{43:[1,262]},{47:[1,263]},{52:[1,264]},{56:[1,265]},{38:[1,266]},{38:[1,267]},{38:[1,268]},{38:[1,269]},{50:[1,270]},{38:[1,271]},{46:[1,272]},{69:[1,273]},{69:[1,274]},{69:[1,275]},{69:[1,276]},{69:[1,277]},o($V8,[2,26]),o($V8,[2,46]),o($V8,[2,41]),o($V8,[2,36]),o($VT,[2,38]),o($V8,[2,31]),o($VT,[2,33]),{38:[1,278]},{38:[1,279]},{38:[1,280]},{38:[1,281]},{38:[1,282]},o($V8,[2,72]),o($V8,[2,73]),o($V8,[2,74]),o($V8,[2,75]),o($V8,[2,76])],
defaultActions: {32:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    function AST_Node(tag,value,fila,columna){
        this.tag = tag;
        this.value = value;
        this.fila = fila;
        this.columna = columna;

        this.childs = [];

        this.addChilds = addChilds;
        this.getSon = getSon;

        function addChilds(){
            for (var i = 0; i < arguments.length; i++) {
                this.childs.push(arguments[i]);
                if (arguments[i]!== null){
                    arguments[i].padre = this;
                }
            }
        }  

        function getSon(pos){
            if(pos > this.hijos.length - 1) return null;
            return this.hijos[pos];
        }
    };

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran los espacios en blanco
break;
case 1:// Comentario linea actual
break;
case 2:return 30
break;
case 3:return 56
break;
case 4:return 52
break;
case 5:return 47
break;
case 6:return 43 
break;
case 7:return 36  
break;
case 8:return 67 
break;
case 9:return 'P_APPEND'
break;
case 10:return 'P_GETVALUE'
break;
case 11:return 'P_SETVALUE'
break;
case 12:return 70
break;
case 13:return 75
break;
case 14:return 'P_SWITCH'
break;
case 15:return 'P_CASE'
break;
case 16:return 'P_DEFAULT'
break;
case 17:return 'P_BREAK'
break;
case 18:return 'P_WHILE'
break;
case 19:return 'P_FOR'
break;
case 20:return 'P_DO'
break;
case 21:return 'P_CONTINUE'
break;
case 22:return 'P_RETURN'
break;
case 23:return 'P_VOID'
break;
case 24:return 'P_WRITELINE'
break;
case 25:return 'P_TOLOWER'
break;
case 26:return 'P_TOUPPER'
break;
case 27:return 'P_LENGHT'
break;
case 28:return 'P_TRUNCATE'
break;
case 29:return 'P_ROUND'
break;
case 30:return 'P_TYPEOF'
break;
case 31:return 'P_TOSTRING'
break;
case 32:return 'P_TOCHARARRAY'
break;
case 33:return 'P_START'
break;
case 34:return 'P_WITH'
break;
case 35:return 63
break;
case 36:return 64
break;
case 37:return 77
break;
case 38:return 78
break;
case 39:return 79
break;
case 40:return 80
break;
case 41:return 81
break;
case 42:return 82
break;
case 43:return 34
break;
case 44:return 84
break;
case 45:return 83
break;
case 46:return 68
break;
case 47:return 87
break;
case 48:return 69
break;
case 49:return 86
break;
case 50:return 89
break;
case 51:return 88
break;
case 52:return 'P_SAND'
break;
case 53:return 'P_SOR'
break;
case 54:return 90
break;
case 55:return 71
break;
case 56:return 73
break;
case 57:return 39
break;
case 58:return 41
break;
case 59:return 32
break;
case 60:return 33
break;
case 61:return 'P_PUNTO'
break;
case 62:return 42
break;
case 63:return 38
break;
case 64:return 'P_DOSPUNTOS'
break;
case 65:return 'P_PREGUNTA'
break;
case 66:return 27
break;
case 67:return 29
break;
case 68:return  'P_SALTOLINEA'
break;
case 69:return  'P_BARRAINVERTIDA'
break;
case 70:return  'P_COMILLADOBLE';
break;
case 71:return  'P_COMILLASIMPLE';
break;
case 72:return  'P_TABULACION'
break;
case 73:return 46;
break;
case 74:return  'P_APOSTROFE';
break;
case 75:return 59;
break;
case 76:return 37;
break;
case 77:return 31;
break;
case 78:return 'P_ENT';
break;
case 79:return  'P_ALFABETO';
break;
case 80:return  'P_CARACTER';
break;
case 81:return  'P_TODO';
break;
case 82: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 91; 
break;
case 83:return 5;
break;
case 84: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                          Func_Error.ObtenerInstancia().insertar(new Cons_Error("Lexico","Caracter: \" "+yy_.yytext+"\" no es valido" ,yy_.yylloc.first_line,yy_.yylloc.first_column));
                                          return null; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:string\b)/,/^(?:new\b)/,/^(?:dynamiclist\b)/,/^(?:append\b)/,/^(?:getvalue\b)/,/^(?:setvalue\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:writeline\b)/,/^(?:tolower\b)/,/^(?:toupper\b)/,/^(?:lenght\b)/,/^(?:truncate\b)/,/^(?:round\b)/,/^(?:typeof\b)/,/^(?:tostring\b)/,/^(?:tochararray\b)/,/^(?:start\b)/,/^(?:with\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\|)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\?)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:\\n)/,/^(?:\\)/,/^(?:[\"])/,/^(?:[\'])/,/^(?:\\t)/,/^(?:["])/,/^(?:['])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:[0-9])/,/^(?:([a-zA-Z_]))/,/^(?:[P_ALFABETO|P_ENT|P_TABULACION|P_COMILLASIMPLE|P_COMILLADOBLE|P_BARRAINVERTIDA|P_SALTOLINEA|\r\nP_PREGUNTA|P_DOSPUNTOS|P_PUNTOYCOMA|P_COMA|P_PUNTO|P_CORCHETE2|\r\n  P_CORCHETE1|P_LLAVE2|P_LLAVE1|P_PAR2|P_PAR1|P_NOT|P_SAND|P_OR|P_MAYOR|P_MENOR|P_IGUAL|P_MODULO|\r\n  P_POTENCIA|P_DIVISION|P_MULTIPLICACION|P_RESTA|P_SUMA])/,/^(?:[P_ALFABETO|P_ENT|P_TABULACION|P_COMILLASIMPLE|P_COMILLADOBLE|P_BARRAINVERTIDA|P_SALTOLINEA|\r\nP_PREGUNTA|P_DOSPUNTOS|P_PUNTOYCOMA|P_COMA|P_PUNTO|P_CORCHETE2|\r\n  P_CORCHETE1|P_LLAVE2|P_LLAVE1|P_PAR2|P_PAR1|P_NOT|P_SAND|P_OR|P_MAYOR|P_MENOR|P_IGUAL|P_MODULO|\r\n  P_POTENCIA|P_DIVISION|P_MULTIPLICACION|P_RESTA|P_SUMA|P_AND|P_OR|P_MAYORIGUAL|P_MENORIGUAL|P_DIFERENTE|\r\n  P_IGUALACION|P_FALSE|P_TRUE|P_WITH|P_START|P_TOCHARARRAY|P_TOSTRING|P_TYPEOF|P_ROUND|P_TRUNCATE|\r\n  P_LENGHT|P_TOUPPER|P_TOLOWER|P_WRITELINE|P_VOID|P_RETURN|P_CONTINUE|P_DO|P_FOR|P_WHILE|P_BREAK|\r\n  P_DEFAULT|P_CASE|P_SWITCH|P_ELSE|P_IF|P_SETVALUE|P_GETVALUE|P_APPEND|P_DYNAMICLIST|P_NEW|\r\n  P_STRING|P_CHAR|P_BOOLEAN|P_DOUBLE|P_INT]*)/,/^(?:"[^\"]*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}