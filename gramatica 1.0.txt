//$$    $1
S: SENTENCIAS EOF  {$$=new AST_Node("RAIZ","RAIZ",this.$first_line,@1.last_column);$$.addChilds($1);return $$} ;




SENTENCIAS: SENTENCIAS SENTENCIA  {$1.addChilds($2);$$=$1;}
            |SENTENCIA  {$$= new AST_Node("SENTENCIAS","SENTENCIAS",this._$.first_line,@1.last_column);
                        $$.addChilds($1);};




SENTENCIA: VARIABLES      P_PUNTOYCOMA        {$$=$1}
           |COMENTARIOS   {$$=$1}
           |VECTORES      P_PUNTOYCOMA        {$$=$1}
           |LISTAS        P_PUNTOYCOMA        {$$=$1}
           |IF           {$$=$1}
           |SWITCH        {$$=$1}
           |BREAK    P_PUNTOYCOMA   {$$=$1}
           |WHILE                    {$$=$1}
           |FOR                     {$$=$1}
           |INCRE_DECRE  P_PUNTOYCOMA          {$$=$1}
           |DO_WHILE   P_PUNTOYCOMA      {$$=$1}
           |CONTINUE   P_PUNTOYCOMA      {$$=$1}
           |RETURN   P_PUNTOYCOMA        {$$=$1}
           |FUNCIONES                  {$$=$1}
           |METODOS                    {$$=$1}
           |WRITE    P_PUNTOYCOMA      {$$=$1}
           |START   P_PUNTOYCOMA        {$$=$1}
           |TERNARIO    P_PUNTOYCOMA    {$$=$1}
           |DECLARACION  P_PUNTOYCOMA     {$$=$1}
           |DECLA_VECTOR  P_PUNTOYCOMA     {$$=$1}
           |APPENDLISTA  P_PUNTOYCOMA       {$$=$1}
           |GETVAL    P_PUNTOYCOMA         {$$=$1}
           |SETVAL   P_PUNTOYCOMA          {$$=$1}
           |LLAMADA    P_PUNTOYCOMA       {$$=$1}   ;




VARIABLES:  P_INT VARINT          
           |VARDOUBLE  {$$= new AST_Node("VARDOUBLE","VARDOUBLE",this._$.first_line,@1.first_column); $$.addChilds($1)}
           |VARBOOLEAN    {$$= new AST_Node("VARBOOLEAN","VARBOOLEAN",this._$.first_line,@1.first_column); $$.addChilds($1)}
           |VARCHAR        {$$= new AST_Node("VARCHAR","VARCHAR",this._$.first_line,@1.first_column); $$.addChilds($1)}
           |VARSTRING    {$$= new AST_Node("VARSTRING","VARSTRING",this._$.first_line,@1.first_column); $$.addChilds($1)}} ;


VECTORES:  VECTORINT   {$$= new AST_Node("VECTORINT","VECTORINT",this._$.first_line,@1.first_column); $$.addChilds($1)}
           |VECTORSTRING   {$$= new AST_Node("VECTORSTRING","VECTORSTRING",this._$.first_line,@1.first_column); $$.addChilds($1)}
           |VECTORCHAR     {$$= new AST_Node("VECTORCHAR","VECTORCHAR",this._$.first_line,@1.first_column); $$.addChilds($1)}
           |VECTORBOOLEAN   {$$= new AST_Node("VECTORBOOLEAN","VECTORBOOLEAN",this._$.first_line,@1.first_column); $$.addChilds($1)}
           |VECTORDOUBLE    {$$= new AST_Node("VECTORDOUBLE","VECTORDOUBLE",this._$.first_line,@1.first_column); $$.addChilds($1)}  ;

LISTAS: LISTAINT  {$$= new AST_Node("LISTAINT","LISTAINT",this._$.first_line,@1.first_column); $$.addChilds($1)}
        |LISTASTRING   {$$= new AST_Node("LISTASTRING","LISTASTRING",this._$.first_line,@1.first_column); $$.addChilds($1)}
        |LISTACHAR   {$$= new AST_Node("LISTACHAR","LISTACHAR",this._$.first_line,@1.first_column); $$.addChilds($1)}
        |LISTABOOLEAN   {$$= new AST_Node("LISTABOOLEAN","LISTABOOLEAN",this._$.first_line,@1.first_column); $$.addChilds($1)}
        |LISTADOUBLE   {$$= new AST_Node("LISTADOUBLE","LISTADOUBLE",this._$.first_line,@1.first_column); $$.addChilds($1)} ;


FUNCIONES:  P_INT   P_ID   PARAMETROS   BLOQUE  
            |P_STRING   P_ID   PARAMETROS   BLOQUE  
            |P_CHAR   P_ID   PARAMETROS   BLOQUE  
            |P_BOOLEAN   P_ID   PARAMETROS   BLOQUE  
            |P_DOUBLE   P_ID   PARAMETROS   BLOQUE   ;


METODOS: P_VOID  P_ID  PARAMETROS   BLOQUE   ;



PARAMETROS:  P_PAR1   TIPOPARAMETRO   P_PAR2
             |P_PAR1     P_PAR2   ;


TIPOPARAMETRO:  TIPOPARAMETRO   P_COMA   TIPO   P_ID
                |TIPO   P_ID   ;


TIPO: P_INT
      |P_STRING
      |P_CHAR
      |P_BOOLEAN
      |P_DOUBLE    ;


LLAMADA:  P_ID  P_PAR1  P_PAR2  
          |P_ID  P_PAR1  PARALLAMADA  P_PAR2  ;


PARALLAMADA:  PARALLAMADA  P_COMA  EXP
              |EXP    ;


COMENTARIOS: P_COMENINICIO   P_TODO    P_COMENFINAL; 


VECTORINT: P_INT   P_ID   P_CORCHETE1  P_CORCHETE2  P_IGUAL  VECINT;

VECINT: P_NEW  P_INT  P_CORCHETE1   P_ENTERO   P_CORCHETE2   
        |P_LLAVE1   VALORESINT  P_LLAVE2   ;

VALORESINT: VALORESINT   P_COMA   EXP
           | EXP;


VECTORSTRING: P_STRING   P_ID   P_CORCHETE1  P_CORCHETE2  P_IGUAL  VECSTRING;

VECSTRING: P_NEW  P_STRING  P_CORCHETE1   P_ENTERO   P_CORCHETE2   
        |P_LLAVE1   VALORESSTRING  P_LLAVE2   ;

VALORESSTRING: VALORESSTRING   P_COMA    EXP
           |   EXP  ;



VECTORCHAR: P_CHAR   P_ID   P_CORCHETE1  P_CORCHETE2  P_IGUAL  VECCHAR;

VECCHAR: P_NEW  P_CHAR  P_CORCHETE1   P_ENTERO   P_CORCHETE2   
        |P_LLAVE1   VALORESCHAR  P_LLAVE2   ;

VALORESCHAR: VALORESCHAR   P_COMA     EXP   
           |   EXP  ;


VECTORBOOLEAN: P_BOOLEAN   P_ID   P_CORCHETE1  P_CORCHETE2  P_IGUAL  VECBOOLEAN;

VECBOOLEAN: P_NEW  P_BOOLEAN  P_CORCHETE1   P_ENTERO   P_CORCHETE2   
        |P_LLAVE1   VALORESBOOLEAN  P_LLAVE2   ;

VALORESBOOLEAN: VALORESBOOLEAN   P_COMA    EXP
           | EXP;


VECTORDOUBLE: P_DOUBLE   P_ID   P_CORCHETE1  P_CORCHETE2  P_IGUAL  VECDOUBLE;

VECDOUBLE: P_NEW  P_DOUBLE  P_CORCHETE1   P_ENTERO   P_CORCHETE2   
        |P_LLAVE1   VALORESDOUBLE  P_LLAVE2   ;

VALORESDOUBLE: VALORESDOUBLE   P_COMA   EXP
           | EXP;




VARINT:    VARIABLEINT    {$$= new AST_Node("VARINT","VARINT",this._$.first_line,@1.first_column); $$.addChilds($1)} ;

VARIABLEINT: P_ID  P_COMA  VARIABLEINT   {$1.addChilds(new AST_Node("ID",$3,this._$.first_line,@3.first_column)); $$=$1;}
          | P_ID                         {$$= new AST_Node("VARIABLEINT","VARIABLEINT"); $$.addChilds(new AST_Node("ID",$1,this._$.first_line,@1.first_column))}
          | P_ID  P_IGUAL    EXP  
          | P_ID  P_IGUAL  P_PAR1  P_INT  P_PAR2  EXP 
          | P_ID  P_IGUAL  P_LENGHT  P_PAR1  EXP  P_PAR2  
          | P_ID  P_IGUAL  P_TRUNCATE  P_PAR1  EXP  P_PAR2   ;

DECI: P_NUMERO
      |P_ID  ;



VARDOUBLE:  P_DOUBLE   P_ID    VARIABLEDOUBLE ;

VARIABLEDOUBLE:  P_COMA    P_ID   VARIABLEDOUBLE
          | P_ID
          | P_IGUAL    EXP 
          | P_IGUAL  P_PAR1  P_DOUBLE  P_PAR2  EXP
          | P_IGUAL  P_ROUND  P_PAR1   EXP   P_PAR2;



VARBOOLEAN:  P_BOOLEAN   P_ID    VARIABLEBOOLEAN ;

VARIABLEBOOLEAN:  P_COMA    P_ID   VARIABLEBOOLEAN
          | P_ID 
          | P_IGUAL    EXP  ;

TRUEFALSE: P_TRUE
          |P_FALSE   ;



VARSTRING:  P_STRING   P_ID    VARIABLESTRING ;

VARIABLESTRING:  P_COMA    P_ID   VARIABLESTRING
          | P_ID 
          | P_IGUAL   EXP  
          | P_IGUAL  MAYMEN;

MAYMEN: P_TOLOWER  P_PAR1  EXP  P_PAR2
        |P_TOUPPER  P_PAR1   EXP  P_PAR2  
        |P_TYPEOF  P_PAR1   EXP   P_PAR2
        |P_TOSTRING  P_PAR1   EXP  P_PAR2;

TEXT: P_NUMERO
      |TRUEFALSE   ;



VARCHAR:  P_CHAR   P_ID    VARIABLECHAR ;

VARIABLECHAR:  P_COMA    P_ID   VARIABLECHAR
          | P_ID
          | P_IGUAL   EXP 
          | P_IGUAL  P_PAR1  P_CHAR  P_PAR2  EXP;



DECLARACION:  P_ID   P_IGUAL   EXP 
              |P_ID   P_IGUAL  P_PAR1   TIPO  P_PAR2  EXP
              |P_ID  P_COMA  DECLARACION  
              |P_ID   P_IGUAL  P_LENGHT  P_PAR1  EXP  P_PAR2  
              |P_ID   P_IGUAL  P_TRUNCATE  P_PAR1  EXP  P_PAR2 
              |P_ID   P_IGUAL  P_ROUND  P_PAR1   EXP   P_PAR2  
              |P_ID MAYMEN;



 
LISTAINT: P_DYNAMICLIST   P_MENOR  P_INT  P_MAYOR   P_ID   P_IGUAL   P_NEW   P_DYNAMICLIST   P_MENOR  P_INT  P_MAYOR  ;

LISTASTRING: P_DYNAMICLIST   P_MENOR  P_STRING  P_MAYOR   P_ID   P_IGUAL   P_NEW   P_DYNAMICLIST   P_MENOR  P_STRING  P_MAYOR  ;

LISTACHAR: P_DYNAMICLIST   P_MENOR  P_CHAR  P_MAYOR   P_ID   P_IGUAL   P_NEW   P_DYNAMICLIST   P_MENOR  P_CHAR  P_MAYOR 
           |P_DYNAMICLIST   P_MENOR  P_CHAR  P_MAYOR   P_ID   P_IGUAL   P_TOCHARARRAY    P_PAR1   EXP  P_PAR2  ;

LISTABOOLEAN: P_DYNAMICLIST   P_MENOR  P_BOOLEAN  P_MAYOR   P_ID   P_IGUAL   P_NEW   P_DYNAMICLIST   P_MENOR  P_BOOLEAN  P_MAYOR  ;

LISTADOUBLE: P_DYNAMICLIST   P_MENOR  P_DOUBLE  P_MAYOR   P_ID   P_IGUAL   P_NEW   P_DYNAMICLIST   P_MENOR  P_DOUBLE  P_MAYOR  ;


APPENDLISTA:  P_APPEND  P_PAR1   P_ID   P_COMA  EXP  P_PAR2  ;


IF: P_IF   P_PAR1    EXP    P_PAR2  BLOQUE   {$$= new AST_Node("IF","IF",this._$.first_line,@1.last_column);$$.addChilds($3,$5)}
    |P_IF   P_PAR1    EXP    P_PAR2  BLOQUE  P_ELSE  ELSE  {$$= new AST_Node("IF","IF",this._$.first_line,@1.last_column); var aux = new AST_Node("ELSE","ELSE",this._$.first_line,@6.last_column); aux.addChilds($7);$$.addChilds($3,$5,aux)};


ELSE:   IF
       |BLOQUE   ;



SWITCH: P_SWITCH   P_PAR1   EXP   P_PAR2  BLOQUESWITCH   ;


BLOQUESWITCH: P_LLAVE1     P_LLAVE2
              |P_LLAVE1    LISTCASE      P_LLAVE2  ;


LISTCASE: P_CASE   EXP   BSW    LISTCASE
          |P_CASE   EXP   BSW
          |P_DEFAULT   BSW  ;


BSW:  P_DOSPUNTOS SENTENCIAS 
      |P_DOSPUNTOS ;


BREAK: P_BREAK  ;


CONTINUE: P_CONTINUE     ;


RETURN: P_RETURN
        |P_RETURN   EXP   ;


WHILE: P_WHILE   P_PAR1  EXP   P_PAR2   BLOQUE  {$$=new AST_Node("WHILE","WHILE",this._$.first_line,@1.last_column); $$.addChilds($3,$5)};

FOR: P_FOR   P_PAR1   ASIG_DEC    P_PUNTOYCOMA     EXP    P_PUNTOYCOMA   EXP    P_PAR2   BLOQUE;


ASIG_DEC:  P_INT   P_ID   P_IGUAL   EXP   
           |P_ID   P_IGUAL   EXP    ;


INCRE_DECRE:  P_ID   P_SUMA  P_SUMA   {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
              |P_ID  P_RESTA  P_RESTA   {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);};


DO_WHILE: P_DO   BLOQUE    P_WHILE   P_PAR1    EXP    P_PAR2  {$$=new AST_Node("DO_WHILE","DO_WHILE",this._$.first_line,@1.last_column);$$.addChilds($2,$5)} ;


BLOQUE: P_LLAVE1     SENTENCIAS    P_LLAVE2  {$$= new AST_Node("BLOQUE","BLOQUE",this._$.first_line,@1.last_column); $$.addChilds($2)}
        |P_LLAVE1   P_LLAVE2   {$$= new AST_Node("BLOQUE","BLOQUE",this._$.first_line,@1.last_column);} ;



WRITE:  P_WRITELINE  P_PAR1     EXP    P_PAR2   {$$= new AST_Node("WRITELINE","WRITELINE",this._$.first_line,@1.last_column); $$.addChilds($3);};


START: P_START  P_WITH    P_ID   VALUE   ;

VALUE:  P_PAR1    LISTVALUE   P_PAR2   
        |P_PAR1   P_PAR2   ;

LISTVALUE:  LISTVALUE   P_COMA   EXP
            |EXP        ;            


TERNARIO: P_ID  P_IGUAL  EXP   P_PREGUNTA  EXP    P_DOSPUNTOS      EXP  ;


DECLA_VECTOR:  P_ID  P_CORCHETE1  P_ENTERO  P_CORCHETE2   P_IGUAL   EXP 
              |P_ID  P_CORCHETE1  P_ENTERO  P_CORCHETE2   P_IGUAL  P_PAR1   TIPO  P_PAR2   EXP
              |P_ID  P_CORCHETE1  P_ENTERO  P_CORCHETE2   P_COMA  DECLA_VECTOR ; 

GETVAL: P_GETVALUE   P_PAR1   P_ID  P_COMA   EXP   P_PAR2  ;


SETVAL: P_SETVALUE  P_PAR1  P_ID   P_COMA  EXP  P_COMA  EXP  P_PAR2  ;


EXP: EXP P_SUMA EXP                    {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |EXP P_RESTA EXP                  {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |EXP P_MULTIPLICACION EXP                    {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |EXP P_DIVISION EXP                    {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |EXP P_POTENCIA EXP                    {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |EXP P_MODULO EXP                    {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |EXP P_DIFERENTE EXP              {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |EXP P_IGUALACION EXP                  {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |EXP P_IGUALR EXP                 {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |EXP P_MAYOR EXP                  {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |EXP P_MENOR EXP                  {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |EXP P_MAYORIGUAL EXP                 {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |EXP P_MENORIGUAL EXP                 {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |EXP P_AND EXP                    {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |EXP P_OR EXP                     {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |P_NOT EXP                        {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds(new AST_Node("op",$1,this._$.first_line,@1.last_column),$2);}
    |P_PAR1 EXP P_PAR2             {$$=$2}
    |P_CADENA                         {$$= new AST_Node("EXP","EXP",this._$.first_line,@1.last_column);
                                         var text = $1.substr(0,$1.length);
                                         text=text.replace(/\\n/g,"\n");
                                         text=text.replace(/\\t/g,"\t");
                                         text=text.replace(/\\r/g,"\r");
                                         text=text.replace(/\\\\/g,"\\");
                                         text=text.replace(/\\\"/g,"\"");
                                         text=text.replace(/\\\'/g,"\'");
                                        $$.addChilds(new AST_Node("string",text,this._$.first_line,@1.last_column));}
    |P_NUMERO                         {$$= new AST_Node("EXP","EXP",this._$.first_line,@1.last_column);$$.addChilds(new AST_Node("numero",$1,this._$.first_line,@1.last_column));}
    |P_TRUE                          {$$= new AST_Node("EXP","EXP",this._$.first_line,@1.last_column);$$.addChilds(new AST_Node("true",$1,this._$.first_line,@1.last_column));}
    |P_FALSE                        {$$= new AST_Node("EXP","EXP",this._$.first_line,@1.last_column);$$.addChilds(new AST_Node("false",$1,this._$.first_line,@1.last_column));}
    |P_ID                            {$$= new AST_Node("EXP","EXP",this._$.first_line,@1.last_column);$$.addChilds(new AST_Node("id",$1,this._$.first_line,@1.last_column));}
    |P_RESTA  EXP                   {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds(new AST_Node("op",$1,this._$.first_line,@1.last_column),$2);}
    |EXP  P_SUMA  P_SUMA            {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |EXP   P_RESTA  P_RESTA          {$$= new AST_Node("EXP","EXP",this._$.first_line,@2.last_column);$$.addChilds($1,new AST_Node("op",$2,this._$.first_line,@2.last_column),$3);}
    |P_CARACTER                      {$$= new AST_Node("EXP","EXP",this._$.first_line,@1.last_column);
                                         var text = $1.substr(0,$1.length);
                                         text=text.replace(/\\n/g,"\n");
                                         text=text.replace(/\\t/g,"\t");
                                         text=text.replace(/\\r/g,"\r");
                                         text=text.replace(/\\\\/g,"\\");
                                         text=text.replace(/\\\"/g,"\"");
                                         text=text.replace(/\\\'/g,"\'");
                                        $$.addChilds(new AST_Node("char",text,this._$.first_line,@1.last_column));} 
    |P_ID  P_CORCHETE1   P_ENTERO  P_CORCHETE2   {$$= new AST_Node("EXP","EXP",this._$.first_line,@1.last_column);$$.addChilds(new AST_Node("elemento",$1,this._$.first_line,@1.last_column));}
    |GETVAL 
    |LLAMADA;                
